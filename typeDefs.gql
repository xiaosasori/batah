type User {
  _id: ID!
  email: String!
  password: String!
  avatar: String
  joinDate: String!
  firstName: String!
  lastName: String!
  phone: String!
  location: Location
  paymentAccount: [PaymentAccount]
}

type Location {
  _id: ID!
  lat: Float!
  lng: Float!
  address: String!
  directions: String!
}

type PaymentAccount {
  _id: ID!
  createdAt: String!
  type: PAYMENT_PROVIDER
  user: User!
  payments: [Payment!]!
  paypal: PaypalInformation
  creditcard: CreditCardInformation
}

type Payment {
  _id: ID!
  createdAt: String!
  paymentMethod: PaymentAccount!
  serviceFee: Float!
}

type PaypalInformation {
  _id: ID!
  createdAt: String!
  email: String!
  paymentAccount: PaymentAccount
}

type CreditCardInformation {
  _id: ID!
  cardNumber: String!
  country: String!
  createdAt: String!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  firstName: String!
  lastName: String!
  paymentAccount: PaymentAccount
  postalCode: String!
  securityCode: String!
}

enum PAYMENT_PROVIDER {
  PAYPAL
  CREDIT_CARD
}

type Query {
  me: User!
}

type Mutation {
  signup(email: String!, password: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  signinUser(token: String!, type: String!): Token!
}
type Token {
  token: String!
}
type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}
