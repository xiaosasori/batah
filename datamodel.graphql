type User {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String! @unique
  password: String!
  phone: String!
  ownedOffices: [Office!]!
  location: Location
  bookings: [Booking!]!
  paymentAccount: [PaymentAccount!]!
  sentMessages: [Message!]! @relation(name: "SentMessages")
  receivedMessages: [Message!]! @relation(name: "ReceivedMessages")
  notifications: [Notification!]!
  profilePicture: Picture
}

type Office {
  id: ID! @unique
  name: String!
  type: OFFICE_TYPES
  shortDescription: String!
  description: String!
  size: Int!
  numSeats: Int!
  reviews: [Review!]!
  amenities: Amenities!
  host: User!
  pricing: Pricing!
  location: Location!
  views: Views!
  policies: Policies
  officeRules: OfficeRules
  bookings: [Booking!]!
  pictures: [Picture!]!
  popularity: Int!
  availableSchedule: [AvailableSchedule!]!
}

type Pricing {
  id: ID! @unique
  office: Office!
  smartPricing: Boolean! @default(value: "false")
  basePrice: Int!
  minPrice: Int!
  maxPrice: Int!
  currency: CURRENCY
}

type Policies {
  id: ID! @unique
  govIssuedId: Boolean! @default(value: "false")
  minUsingTime: Int!
  office: Office!
  additionalPolicies: String
}

type OfficeRules {
  id: ID! @unique
  smokingAllowed: Boolean! @default(value: "false")
  partiesAndEventsAllowed: Boolean! @default(value: "false")
  additionalRules: String
  office: Office!
}

type Views {
  id: ID! @unique
  lastWeek: Int!
  office: Office!
}

type Location {
  id: ID! @unique
  lat: Float!
  lng: Float!
  neighbourHood: Neighbourhood
  user: User
  office: Office
  address: String!
  directions: String!
}

type Neighbourhood {
  id: ID! @unique
  locations: [Location!]!
  name: String!
  placePreview: Picture
  city: City!
  popularity: Int!
}

type City {
  id: ID! @unique
  name: String!
  neighbourhoods: [Neighbourhood!]!
}

type Picture {
  id: ID! @unique
  url: String!
}

type Amenities {
  id: ID! @unique
  office: Office!
  wifi: Boolean! @default(value: "false")
  tv: Boolean! @default(value: "false")
  airConditioning: Boolean! @default(value: "false")
  projector: Boolean! @default(value: "false")
  whiteBoard: Boolean! @default(value: "false")
}

type Review {
  id: ID! @unique
  createdAt: DateTime!
  text: String!
  stars: Int!
  accuracy: Int!
  location: Int!
  checkIn: Int!
  cleanliness: Int!
  office: Office!
}

type AvailableSchedule {
  id: ID! @unique
  office: Office!
  availableDate: DateTime!
  availableHour: DateTime!
}

type BookedSchedule {
  id: ID! @unique
  booking: Booking!
  bookedDate: DateTime!
  bookedHour: DateTime!
}

type Booking {
  id: ID! @unique
  createdAt: DateTime!
  bookee: User!
  office: Office!
  bookedSchedules: [BookedSchedule!]! 
  payment: Payment
}

type Payment {
  id: ID! @unique
  createdAt: DateTime!
  serviceFee: Float!
  officePrice: Float!
  totalPrice: Float!
  booking: Booking!
  paymentMethod: PaymentAccount!
}

type PaymentAccount {
  id: ID! @unique
  createdAt: DateTime!
  type: PAYMENT_PROVIDER
  user: User!
  payments: [Payment!]!
  paypal: PaypalInformation
  creditcard: CreditCardInformation
}

type PaypalInformation {
  id: ID! @unique
  createdAt: DateTime!
  email: String!
  paymentAccount: PaymentAccount!
}

type CreditCardInformation {
  id: ID! @unique
  createdAt: DateTime!
  cardNumber: String!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  securityCode: String!
  firstName: String!
  lastName: String!
  postalCode: String!
  country: String!
  paymentAccount: PaymentAccount
}

type Message {
  id: ID! @unique
  createdAt: DateTime!
  from: User! @relation(name: "SentMessages")
  to: User! @relation(name: "ReceivedMessages")
  deliveredAt: DateTime!
  readAt: DateTime!
}

type Notification {
  id: ID! @unique
  createdAt: DateTime!
  type: NOTIFICATION_TYPE
  user: User!
  link: String!
  readDate: DateTime!
}

enum CURRENCY {
  EUR
  JPY
  USD
  VND
}

enum OFFICE_TYPES {
  MEETING
  TEACHING
  TALKSHOW
}

enum PAYMENT_PROVIDER {
  PAYPAL
  CREDIT_CARD
}

enum NOTIFICATION_TYPE {
  OFFER
  INSTANT_BOOK
  RESPONSIVENESS
  HOUSE_RULES
}
